Inserting 1...100 ....
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 

Inserting 200 at random indices ....
1 200 2 200 3 4 5 6 7 8 200 200 9 200 10 200 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 200 28 29 30 31 32 200 33 200 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 200 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 

Inserting 300 at the beginning ....
300 300 300 300 300 300 300 300 300 300 1 200 2 200 3 4 5 6 7 8 200 200 9 200 10 200 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 200 28 29 30 31 32 200 33 200 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 200 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 

Inserting 400 at the end ....
300 300 300 300 300 300 300 300 300 300 1 200 2 200 3 4 5 6 7 8 200 200 9 200 10 200 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 200 28 29 30 31 32 200 33 200 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 200 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 400 400 400 400 400 400 400 400 400 400 

Printing the sequence using select ...
size is 130
300 300 300 300 300 300 300 300 300 300 1 200 2 200 3 4 5 6 7 8 200 200 9 200 10 200 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 200 28 29 30 31 32 200 33 200 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 200 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 400 400 400 400 400 400 400 400 400 400 

modifying at middle (neither beginning nor end) indices to 500 ...
modifying index 10
modifying index 20
modifying index 30
modifying index 40
modifying index 50
modifying index 60
modifying index 70
modifying index 80
modifying index 90
modifying index 100
300 300 300 300 300 300 300 300 300 500 1 200 2 200 3 4 5 6 7 500 200 200 9 200 10 200 11 12 13 500 15 16 17 18 19 20 21 22 23 500 25 26 27 200 28 29 30 31 32 500 33 200 34 35 36 37 38 39 40 500 42 43 44 45 46 47 48 49 50 500 52 53 54 55 56 57 58 59 60 500 62 63 64 65 66 67 68 69 70 500 72 73 74 75 76 77 78 79 80 500 82 83 84 200 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 400 400 400 400 400 400 400 400 400 400 

modifying index 1 and T->size() to 600 ...
600 300 300 300 300 300 300 300 300 500 1 200 2 200 3 4 5 6 7 500 200 200 9 200 10 200 11 12 13 500 15 16 17 18 19 20 21 22 23 500 25 26 27 200 28 29 30 31 32 500 33 200 34 35 36 37 38 39 40 500 42 43 44 45 46 47 48 49 50 500 52 53 54 55 56 57 58 59 60 500 62 63 64 65 66 67 68 69 70 500 72 73 74 75 76 77 78 79 80 500 82 83 84 200 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 400 400 400 400 400 400 400 400 400 600 

Splitting at index 50 ...
Printing the left side of the split ...
600 300 300 300 300 300 300 300 300 500 1 200 2 200 3 4 5 6 7 500 200 200 9 200 10 200 11 12 13 500 15 16 17 18 19 20 21 22 23 500 25 26 27 200 28 29 30 31 32 500 
Printing the right side (Tree R) of the split ...
33 200 34 35 36 37 38 39 40 500 42 43 44 45 46 47 48 49 50 500 52 53 54 55 56 57 58 59 60 500 62 63 64 65 66 67 68 69 70 500 72 73 74 75 76 77 78 79 80 500 82 83 84 200 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 400 400 400 400 400 400 400 400 400 600 

splitting the left side at index 25 ...
Printing the left side (Tree T) of the split ...
600 300 300 300 300 300 300 300 300 500 1 200 2 200 3 4 5 6 7 500 200 200 9 200 10 
Printing the right side (Tree S) of the split ...
200 11 12 13 500 15 16 17 18 19 20 21 22 23 500 25 26 27 200 28 29 30 31 32 500 

splitting Tree R at index 25 ...
Printing the left side (still Tree R) of the split ...
33 200 34 35 36 37 38 39 40 500 42 43 44 45 46 47 48 49 50 500 52 53 54 55 56 
Printing the right side (Tree P) of the split ...
57 58 59 60 500 62 63 64 65 66 67 68 69 70 500 72 73 74 75 76 77 78 79 80 500 82 83 84 200 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 400 400 400 400 400 400 400 400 400 600 

splitting Tree R at index R->size()-1 ...
Printing the left side (still Tree R) of the split ...
33 200 34 35 36 37 38 39 40 500 42 43 44 45 46 47 48 49 50 500 52 53 54 55 
Printing the right side (Tree Q) of the split ...
56 

splitting Tree R at index 1 ...
Printing the left side (still Tree R) of the split ...
33 
Printing the right side (Tree O) of the split ...
200 34 35 36 37 38 39 40 500 42 43 44 45 46 47 48 49 50 500 52 53 54 55 

splitting Tree R at index 0 ...
Printing the left side (still Tree R) of the split ...

Printing the right side (Tree Y) of the split ...
33 

splitting Tree R at index R->size() ...
Printing the left side (still Tree R) of the split ...

Printing the right side (Tree Z) of the split ...


joining R with Z ...


joining R with Y ...
33 

joining R with O ...
33 200 34 35 36 37 38 39 40 500 42 43 44 45 46 47 48 49 50 500 52 53 54 55 

joining R with Q ...
33 200 34 35 36 37 38 39 40 500 42 43 44 45 46 47 48 49 50 500 52 53 54 55 56 

joining R with P ...
33 200 34 35 36 37 38 39 40 500 42 43 44 45 46 47 48 49 50 500 52 53 54 55 56 57 58 59 60 500 62 63 64 65 66 67 68 69 70 500 72 73 74 75 76 77 78 79 80 500 82 83 84 200 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 400 400 400 400 400 400 400 400 400 600 

joining R with S ...
33 200 34 35 36 37 38 39 40 500 42 43 44 45 46 47 48 49 50 500 52 53 54 55 56 57 58 59 60 500 62 63 64 65 66 67 68 69 70 500 72 73 74 75 76 77 78 79 80 500 82 83 84 200 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 400 400 400 400 400 400 400 400 400 600 200 11 12 13 500 15 16 17 18 19 20 21 22 23 500 25 26 27 200 28 29 30 31 32 500 

joining R with T ...
33 200 34 35 36 37 38 39 40 500 42 43 44 45 46 47 48 49 50 500 52 53 54 55 56 57 58 59 60 500 62 63 64 65 66 67 68 69 70 500 72 73 74 75 76 77 78 79 80 500 82 83 84 200 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 400 400 400 400 400 400 400 400 400 600 200 11 12 13 500 15 16 17 18 19 20 21 22 23 500 25 26 27 200 28 29 30 31 32 500 600 300 300 300 300 300 300 300 300 500 1 200 2 200 3 4 5 6 7 500 200 200 9 200 10 

de-allocating memory for all trees ...
